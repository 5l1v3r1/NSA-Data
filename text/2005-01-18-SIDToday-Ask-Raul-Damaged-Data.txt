<p data-reactid=".ti.1.0.0.1.0.1.$0.0" class="SidTodayFilesDetailViewer-pages-page-paragraph">DYNAMIC PAGE -- HIGHEST POSSIBLE CLASSIFICATION IS<br>TOP SECRET // SI / TK // REL TO USA AUS CAN GBR NZL<br><br>(U) Ask Raul: Damaged Data<br>FROM: Raul<br>A DNI Analyst<br>Run Date: 01/18/2005<br><br>Dear Raul, <br>(C) I get an awful lot of damaged attachments in my DNI. Is there<br>anything I can do, within reason, to help with this?<br>Betty<br>Betty,<br>(U) The short answer is, "Yep." It would be nice though, if<br>something could be done about the huge amount of damaged data<br>we haul in. Some of the material we get is damaged for valid<br>reasons but a lot is damaged due to things we are doing (or not<br>doing). So, I'll give you a hint or two on how to prevent problems<br>and a few on how to solve some of them on your own.<br>(S) Several years ago over in the Office of Russia we had been<br>waiting for what seemed like forever to get collection from a<br>particular link coming from a satellite parked over Vladivostok. No<br>sooner had we started getting the collection than we were let<br>down. On the positive side the sessions were, for the time, huge<br>and looked very juicy but every single one of them was corrupted.<br>(C) Most folks just blew it off as bad luck and went on about their<br>business but when I looked at the SRI, which didn't include the<br>signal strength, I knew exactly what was wrong. You see, the<br>decision had been made to task the signal at Bad Aibling, a mere<br>1/3rd the way around the world from Vlad and of course the<br>antenna was depressed to such a low elevation that the signal was<br>being picked up through the surrounding pine forests and in the<br>process was dropping out. In other words, we were suffering from<br>a self-inflicted SIGINT wound. Misawa would have been a much<br>better location to collect this signal from but...<br>(C) If BA had been using a coat hanger for an antenna things<br>wouldn't have been much different than what was effectively<br>pointing the big one at the ground! So, rule number one is to<br>make sure you are collecting your signal from the right site.<br>(S) Another problem is our equipment. Things don't always work<br>as advertised and sometimes things just get fouled up. Not long<br>ago an analyst asked Raul to look at some traffic that was<br>"damaged". But, it wasn't damaged at all. It was unprocessed TCP.<br>As it turned out someone had accidentally misconfigured the<br>protocol processor at the site and had it stop once it had finished<br>with IP. Oops! Interestingly, this problem had been going on for<br>about six weeks and no one had noticed.<br>(U//FOUO) In another case, a similar misconfiguration had been in<br>place for well over five years and no one caught it. So, rule number<br>two is to make sure things are working. Relying on the traffic<br><br> SERIES: <br>(U) Ask Raul - Answers<br>to DNI Questions<br>1.  Ask Raul : Fonts and<br>Encoding<br>2.  Ask Raul : Dictionary<br>Equations<br>3.  Ask Raul : HTML<br>Coding and Email<br>4.  Ask Raul : PDF Files<br>5.  Ask Raul: Damaged<br>Data<br>6.  Ask Raul : Getting<br>the Most from<br>Metadata<br><br> </p><p data-reactid=".ti.1.0.0.1.0.1.$1.0" class="SidTodayFilesDetailViewer-pages-page-paragraph">fairies will get you in trouble.<br>(U) Remember, damage doesn't just happen, something causes it<br>and it is definitely much better to prevent it than to try and fix it.<br>(U) That said, here are some things you can do if you find yourself<br>sitting there pulling your hair out and crying over your damaged<br>base64 encoded Word document from Osama.<br>(C) First, do another search. For the love of Pete, please do<br>another search! I can't count the times folks have contacted me<br>about a damaged file they have and all I have done is do another<br>query for the file. On the one hand, it makes Raul look like a<br>genius but on the other, it sure makes me wonder about our<br>analysts.<br>(U//FOUO) Usually, you've got all the information you need: file<br>name, sender, recipient, etc. You'd be amazed, or maybe not, at<br>how much duplicate traffic we have in the system. If you are lucky,<br>you'll find a second copy of your attachment in perfect condition. If<br>not perfect, you can often patch a good attachment together from<br>the pieces of several bad ones. This is a bit time consuming but<br>very rewarding when you create your own little Frankenstein's<br>monster which displays perfectly. A simple text editor is the ideal<br>tool for this type or work.<br>(C) Second, if you can't find another copy of your wounded<br>attachment, give it an examination. Are there lots of errors or just<br>a few? Do the errors look like whoppers or is there just a byte or<br>two missing? What kind of file is it -- Word, Excel, PDF, ZIP, etc.?<br>It is much easier to recover text than binary material.<br>(U//FOUO) And lastly, do you have any way of handling the<br>damaged file once you do whatever voodoo you do to it? If you've<br>got so many errors it looks like someone was shooting the traffic<br>with a machine gun, then it is probably best to just say a little<br>prayer and bury it. If not, prep for surgery!<br>(S) Third, get hopping. The best way to demonstrate this is to just<br>give an example. Here we go! Let's say I get some "collection" and<br>try to open the attachment, a Word document, but it all goes<br>kaboom! I've tried some additional searches and turned up nothing<br>but goose eggs. So, I look at the raw file and see something like<br>this inside it amongst all the base64 encoded lines:<br><br>I immediately see that I'm missing a few bytes from the third line.<br>If I go ahead and decode this, I'll end up with the following mess:<br><br>Not good. Now, I know the base64 alphabet covers the characters<br>A-Z, a-z, 0-9, +, / and = and since = is just a pad, we have to<br>start guessing. Since I'm expecting text to be here I'm going to<br>insert two /'s at the end of the bad line to get the line length back<br>in place and then base64 decode it. Here's how it looks now:<br><br>and when we decode it:<br><br> </p><p data-reactid=".ti.1.0.0.1.0.1.$2.0" class="SidTodayFilesDetailViewer-pages-page-paragraph">(U//FOUO) Quite obviously this made a whole lot of difference. Had<br>this been some kind of binary file (i.e. image) I'd have used A's<br>instead of the /'s. I use the A &amp; / as my preference but you can<br>use other characters if you wish. Also, if you look at your data and<br>see something like this:<br>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB<br>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB<br>BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB<br>Then obviously the correct thing to do would be to pad out the<br>short line with three more B's. Use your noodle and you'll usually<br>be safe.<br>(S) Something else to remember here is the number 4. Whatever<br>you have in base64 should be a multiple of 4. Do not count any<br>carriage returns or linefeeds. If you fix something but don't make<br>sure the line length is a multiple of 4, things are not going to work.<br>(U) Likewise, it is possible the error could be in the center of the<br>line somewhere and not conveniently located at the very end as in<br>the example above. Let's take the same example from above but<br>this time we'll put the damage somewhere in the middle so that it<br>looks like this:<br><br>(U)This time when I add the two /'s to the end of the line I just get<br>the mess below which tells me the error is somewhere within the<br>short line:<br><br>(U) So, I start decoding the third line in chunks of 4 bytes. I'll pick<br>the first half or so of the line and decode it. Remember, I need to<br>pick a multiple of 4. If things come out correctly, then I'll know the<br>error is somewhere in the second half. If not, it has to be in the<br>first half. Simple enough. We take the first 36 bytes and it looks<br>like this.<br><br>and when decoded:<br><br>(U) This is obviously messed up and since it is right at the end of<br>the 36 bytes, I'll concentrate on the inserting my patching<br>characters somewhere between bytes 33 &amp; 36. Lucky us though,<br>since there is something readable underneath, I can insert the two<br>missing characters in any of the positions and it will decode close<br>enough for me to guess even if it isn't perfect. Watch:<br><br>(U) If you can't figure out what the garbled word is supposed to be<br>here, then it's time to get out of the analysis biz. The key thing to<br>remember is that everything, while base64 encoded, has to be a<br>multiple of 4.<br>(C) So, there you go. I've just barely scratched the surface here on<br>repairing data but it can be done and it doesn't take a degree in<br>rocket science or fancy tools. All the tools you need are available<br>via the corporate toolset on everyone's desktop (at least if you are<br><br> </p><p data-reactid=".ti.1.0.0.1.0.1.$3.0" class="SidTodayFilesDetailViewer-pages-page-paragraph">in S2). If you'd like to let an automated process help you out, you<br>can always try running your damaged files through Rocksolid<br>(<br>) . You won't find<br>the flexibility you'd have in doing it by hand but it is a start.<br>Enjoy!<br><br>"(U//FOUO) SIDtoday articles may not be republished or reposted outside NSANet<br>without the consent of S0121 (DL sid_comms)."<br><br>DYNAMIC PAGE -- HIGHEST POSSIBLE CLASSIFICATION IS<br>TOP SECRET // SI / TK // REL TO USA AUS CAN GBR NZL<br>DERIVED FROM: NSA/CSSM 1-52, DATED 08 JAN 2007 DECLASSIFY ON: 20320108<br><br> </p>